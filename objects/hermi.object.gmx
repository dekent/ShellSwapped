<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>hermi_idle</spriteName>
  <solid>-1</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>anim_counter = 18
anim_max = 27

cx = x
cy = y + 24
depth = -cy

trade_radius = 150
value[item_to_index(penny)] = 5
value[item_to_index(pearl)] = 10
value[item_to_index(pebble)] = 1
value[item_to_index(seaweed)] = 0
value[item_to_index(stud)] = 5
value[item_to_index(live_fish)] = 2
value[item_to_index(dead_fish)] = 2
value[item_to_index(fish_bones)] = 1
value[item_to_index(sponge)] = 4

value[item_to_index(quarter)] = 5
value[item_to_index(rock1)] = 0
value[item_to_index(rock2)] = 2
value[item_to_index(driftwood)] = 2

current_trade = 0

trade_amounts[0] = 2
trade_amounts[1] = 5
trade_amounts[2] = 3
trade_amounts[3] = 4
trade_amounts[4] = 2
trade_amounts[5] = 1

trades[0] = seaweed
trades[1] = rock1
trades[2] = pebble
trades[3] = driftwood
trades[4] = fish_bones
trades[5] = conch_shell

trade_accept[0, 0] = "Woo!  I'll take it!"
trade_accept[0, 1] = "Thanks, Clawdette!"

trade_accept[1, 0] = "Maybe Olly will finally respect my business acumen..."

trade_accept[2, 0] = "Take good care of them!"
trade_accept[2, 1] = "Don't let them touch eachother!"

trade_accept[3, 0] = "Aha, yes!"
trade_accept[3, 1] = "Looks great!"

trade_accept[4, 0] = "Here you go!"
trade_accept[4, 1] = "Put those bones to good use!"

trade_accept[5, 0] = "Have a good day!"


trade_reject[0, 0] = "Is that a good deal?  I don't know, maybe something else..."
trade_reject[0, 1] = "Something about that doesn't look right."
trade_reject[0, 2] = "I think I might already have some of that.  Maybe...?"

trade_reject[1, 0] = "Is that a good deal?  I don't know, maybe something else..."
trade_reject[1, 1] = "Something about that doesn't look right."
trade_reject[1, 2] = "I think I might already have some of that.  Maybe...?"

trade_reject[2, 0] = "Is that a good deal?  I don't know, maybe something else..."
trade_reject[2, 1] = "Something about that doesn't look right."
trade_reject[2, 2] = "I think I might already have some of that.  Maybe...?"

trade_reject[3, 0] = "Is that a good deal?  I don't know, maybe something else..."
trade_reject[3, 1] = "Something about that doesn't look right."
trade_reject[3, 2] = "I think I might already have some of that.  Maybe...?"

trade_reject[4, 0] = "Is that a good deal?  I don't know, maybe something else..."
trade_reject[4, 1] = "Something about that doesn't look right."
trade_reject[4, 2] = "I think I might already have some of that.  Maybe...?"

trade_reject[5, 0] = "Just leave me any old thing."

out_of_trades[0] = "I think I'm done trading for today."
out_of_trades[1] = "Thanks for trading with me!  It's so fun!"


chat[0, 0] = "Oh hi, Clawdette!  It's been a while!"
chat[0, 1] = "You're here to trade, aren't you?"
chat[0, 2] = "Trading's so fun!"
chat[0, 3] = "I just wish Olly would trade me one of his shiny pearls."
chat[0, 4] = "He says all my stuff is junk."
chat[0, 5] = "But you'll trade with me, won't you Clawdette?"
chat[0, 6] = "I've got some seaweed!"
chat[0, 7] = "It's tasty, but you're a crab so I don't have to tell you that!"

chat[1, 0] = "You'll never believe what I found, Clawdette."
chat[1, 1] = "A rock!"
chat[1, 2] = "A whole rock!  And I pushed it all by myself!"

chat[2, 0] = "I found some pebbles.  They're smooth.  Interested?"
chat[2, 1] = "There's three of them!"
chat[2, 2] = "They might be magic.  I'm not sure how to check."

chat[3, 0] = "You know those sticks that are just lying around on the beach?"
chat[3, 1] = "I have one!"
chat[3, 2] = "Can you believe they're just lying around for anyone to find?"
chat[3, 3] = "Anyway, will you give me something for my stick?"

chat[4, 0] = "Emolie gave me some fish bones."
chat[4, 1] = "She doesn't like eating the bones."
chat[4, 2] = "I agree!" 
chat[4, 3] = "They taste bad!"
chat[4, 4] = "Have you tried them?  I can trade them to you!"

chat[5, 0] = "You're so great, Clawdette!  Thanks for all of the trades!"
chat[5, 1] = "Oh, that reminds me..."
chat[5, 2] = "You look like you're outgrowing your shell."
chat[5, 3] = "And I found this shell that reminded me of you!"
chat[5, 4] = "It's your favorite color!"
chat[5, 5] = "I'll trade it to you for..." 
chat[5, 6] = "Anything at all, because you're such a good friend!"

chat[6, 0] = "Enjoy your new shell!"
chat[6, 1] = "Hey, if you're not doing anything tomorrow..."
chat[6, 2] = "Want to hang out?"
chat[6, 3] = "We can go for a walk, collect stuff together..."
chat[6, 4] = "Maybe figure out those magic pebbles?"

chat_loop_point[0] = 6
chat_loop_point[1] = 1
chat_loop_point[2] = 0
chat_loop_point[3] = 2
chat_loop_point[4] = 3
chat_loop_point[5] = 2
chat_loop_point[6] = 1

chat_index = 0

text_timer = 0
active_text = ""
tx = x
ty = y
tx_offset = 0
ty_offset = -48
ty_speed = 0.25
text_time = 80
text_color = make_colour_rgb(255, 107, 107)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//text updates
if (text_timer &gt; 0)
{
    ty -= ty_speed
    text_timer --
}

// trade stuff
var player = instance_find(clawdette, 0)
var dst = 0
with (player)
{
    dst = script_execute(distance_from_player, other.cx, other.cy)
}
if (dst &lt; trade_radius &amp;&amp; keyboard_check_pressed(ord('X')))
{
    if (current_trade &gt;= array_length_1d(trades))
    {
        active_text = choose_from_array(out_of_trades)
        text_timer = text_time
        tx = x + tx_offset
        ty = y + ty_offset
    }
    else
    {
        var sum = 0
        var trade_item_count = 0
        var trade_items = 0
        for (i = 0; i &lt; instance_number(pushable); i += 1)
        {
            var item = instance_find(pushable, i);
            with (item)
            {
                if (script_execute(distance, other.cx, other.cy) &lt; other.trade_radius)
                {
                    sum += other.value[script_execute(item_to_index, object_index)]
                    trade_items[trade_item_count] = item
                    trade_item_count ++
                }
            }
        }
        for (var i = 0; i &lt; instance_number(pickable); i += 1)
        {
            var item = instance_find(pickable, i);
            with (item)
            {
                if (script_execute(distance, other.cx, other.cy) &lt; other.trade_radius)
                {
                    sum += other.value[script_execute(item_to_index, object_index)]
                    trade_items[trade_item_count] = item
                    trade_item_count ++
                }
            }
        }
        
        if (sum &gt;= trade_amounts[current_trade])
        {
            var pearl_special = false
            for (var i = array_length_1d(trade_items) - 1; i &gt;= 0; i --)
            {
                if trade_items[i].object_index = pearl
                {
                    pearl_special = true
                }
                global.trade_given_list[global.trade_count, i] = trade_items[i].object_index
                instance_destroy(trade_items[i])
            }
            
            global.trade_received_list[global.trade_count] = trades[current_trade]
            global.traders_list[global.trade_count] = object_index
            
            var new_item = instance_create(-100, -100, trades[current_trade])
            // find a free x, y position
            var placed = false
            while (!placed)
            {
                // todo: switch this to random angle and random distance
                var newx = irandom(trade_radius*2) - trade_radius
                var newy = irandom(trade_radius)
                if (sqrt(sqr(newx) + sqr(newy)) &gt; trade_radius)
                {
                    continue
                }
                newx = cx + newx
                newy = cy + newy
                
                with (new_item)
                {
                    if (place_empty(newx, newy))
                    {
                        x = newx
                        y = newy
                        placed = true
                    }
                }
            }

            if (pearl_special)
            {
                active_text = "How did you get this?  I'm so excited!"
            }
            else
            {
                active_text = choose_from_array_2d(trade_accept, current_trade)
            }
            text_timer = text_time
            tx = x + tx_offset
            ty = y + ty_offset
            
            // adjust trade values for new trades
            if (current_trade == 0)
            {
                value[item_to_index(seaweed)] = 1
            }
            else if (current_trade == 1)
            {
                value[item_to_index(pebble)] = 0
            }
            else if (current_trade == 2)
            {
                value[item_to_index(driftwood)] = 0
            }
            else if (current_trade == 3)
            {
                value[item_to_index(penny)] = 1
                value[item_to_index(pearl)] = 1
                value[item_to_index(pebble)] = 1
                value[item_to_index(seaweed)] = 1
                value[item_to_index(stud)] = 1
                value[item_to_index(live_fish)] = 1
                value[item_to_index(dead_fish)] = 1
                value[item_to_index(quarter)] = 1
                value[item_to_index(rock1)] = 1
                value[item_to_index(rock2)] = 1
                value[item_to_index(driftwood)] = 1
            }
            
            current_trade ++
            global.trade_count ++
            chat_index = 0
        }
        else
        {
            active_text = choose_from_array_2d(trade_reject, current_trade)
            text_timer = text_time
            tx = x + tx_offset
            ty = y + ty_offset
        }
    }
}
else if (dst &lt; trade_radius &amp;&amp; keyboard_check_pressed(ord('C')))
{
    active_text = chat[current_trade, chat_index]
    text_timer = text_time
    tx = x + tx_offset
    ty = y + ty_offset
    
    chat_index ++
    if (chat_index &gt;= array_length_2d(chat, current_trade))
    {
        chat_index = chat_loop_point[current_trade]
    }
}

anim_counter = (anim_counter + 1) % anim_max
if (anim_counter &gt;= 24)
{
    image_index = 5
}
else if (anim_counter &gt;= 21)
{
    image_index = 4
}
else if (anim_counter &gt;= 18)
{
    image_index = 3
}
else if (anim_counter &gt;= 15)
{
    image_index = 2
}
else if (anim_counter &gt;= 12)
{
    image_index = 1
}
else
{
    image_index = 0
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_self()
if (text_timer &gt; 0)
{
    draw_set_color(c_black)
    draw_text_ext(floor(tx + 2.5), floor(ty + 2.5), active_text, 24, 256)
    draw_set_color(text_color)
    draw_text_ext(floor(tx + 0.5), floor(ty + 0.5), active_text, 24, 256)
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
