<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>clawdette_idle</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>mode = 0  // 0: out of shell, 1: retracting, 2: in shell, 3: extracting

anim_counter = 0
anim_counter_walk = 0
anim_max = 63
anim_max_walk = 12
walking = false

pick_object = noone
pick_threshold = 100

moved = false

text_timer = 0
active_text = ""
tx = x
ty = y
text_color = make_colour_rgb(253, 193, 191)

selected_item = 0
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//movement
walking = false
moved = false
var dx = 0
var dy = 0
var change = 6

switch (mode)
{
    case 0:
        // out of shell
        
        // check for retracting
        if (keyboard_check(vk_space))
        {
            image_speed = 0
            mode = 1
            sprite_index = clawdette_retract
            image_index = 0
            anim_counter = 0
            anim_max = 45
            exit
        }
        
        // movement
        if (keyboard_check(vk_up))
        {
            dy -= change;
            anim_counter = 0
        }
        if (keyboard_check(vk_down))
        {
            dy += change;
            anim_counter = 0
        }
        
        if (keyboard_check(vk_left))
        {
            image_xscale = -1
            dx -= change;
            anim_counter = 0
        }
        if (keyboard_check(vk_right))
        {
            image_xscale = 1
            dx += change;
            anim_counter = 0
        }
        
        if (abs(dx) &gt; 0 &amp;&amp; abs(dy) &gt; 0)
        {
            dx /= sqrt(2)
            dy /= sqrt(2)
            dx = floor(dx + 0.5)
            dy = floor(dy + 0.5)
        }
        
        //get a list of all pushable objects
        var pushables = array_create(instance_number(pushable))
        for (var i = 0; i &lt; array_length_1d(pushables); i += 1)
        {
            pushables[i] = instance_find(pushable, i);
        }
        
        //apply horizontal movement and push objects if necessary
        while (abs(dx) &gt; 0)
        {
            if (abs(dx) &gt;= 1)
            {
                var step = sign(dx)
            }
            else
            {
                var step = dx
            }
        
            if (place_free(x+step, y))
            {
                var to_move = 0
                var move_count = 0
                var blocked = false
                for (i = 0; i &lt; array_length_1d(pushables); i += 1)
                {
                    p = pushables[i]
                    if (instance_place(x+step, y, p))
                    {
                        var temp = false
                        with (p)
                        {
                            temp = place_empty(x + step, y)
                        }
                        if (temp)
                        {
                            to_move[move_count] = p
                            move_count ++
                        }
                        else
                        {
                            blocked = true
                            break
                        }
                    }
                }
                if (!blocked)
                {
                    x += step
                    dx -= step
                    walking = true   
                    for (i = 0; i &lt; move_count; i ++)
                    {
                        to_move[i].x += step
                    }     
                }
                else
                {
                    break
                }
            }
            else
            {
                break
            }
        }
        
        //apply vertical movement and push objects if necessary
        while (abs(dy) &gt; 0)
        {
            if (abs(dy) &gt;= 1)
            {
                var step = sign(dy)
            }
            else
            {
                var step = dy
            }
            
            if (place_free(x, y+step))
            {
                var to_move = 0
                var move_count = 0
                var blocked = false
                for (i = 0; i &lt; array_length_1d(pushables); i += 1)
                {
                    p = pushables[i]
                    if (instance_place(x, y+step, p))
                    {
                        var temp = false
                        with (p)
                        {
                            temp = place_empty(x, y + step)
                        }
                        if (temp)
                        {
                            to_move[move_count] = p
                            move_count ++
                        }
                        else
                        {
                            blocked = true
                            break
                        }
                    }
                }
                if (!blocked)
                {
                    y += step
                    dy -= step
                    walking = true 
                    for (i = 0; i &lt; move_count; i ++)
                    {
                        to_move[i].y += step
                    }     
                }
                else
                {
                    break
                }
            }
            else
            {
                break
            }
        }
        
        //determine if there's a pickable object nearby and highlight it
        highlight_pickable_object()
        
        //text updates
        if (text_timer &gt; 0)
        {
            ty -= 2
            text_timer --
        }
        
        //talking
        if (keyboard_check_pressed(ord('C')))
        {
            active_text = choose("hi", "hi.", "hey", "hey.")
            if (audio_is_playing(snd_trade))
            {
                audio_stop_sound(snd_trade)
            }
            if (audio_is_playing(snd_talk))
            {
                audio_stop_sound(snd_talk)
            }
            var talk_sound = snd_talk
            audio_sound_pitch(talk_sound, random_range(1.0, 1.1))
            audio_sound_gain(talk_sound, random_range(0.9, 1.0), 0)
            audio_play_sound(talk_sound, 100, false)
            text_timer = 10
            var d = random_range(50, 60)
            var angle = random_range(pi, 2*pi)
            if (angle &gt; 5*pi/4 &amp;&amp; angle &lt; 7*pi/4)
            {
                d -= 10
            }
            tx = x + d*cos(angle)
            ty = y + d*sin(angle)
        }
        
        if (keyboard_check_pressed(ord('X')))
        {
            active_text = choose("trade?", "trade??", "deal?", "trade")
            if (audio_is_playing(snd_trade))
            {
                audio_stop_sound(snd_trade)
            }
            if (audio_is_playing(snd_talk))
            {
                audio_stop_sound(snd_talk)
            }
            var trade_sound = snd_trade
            audio_sound_pitch(trade_sound, random_range(1.0, 1.1))
            audio_sound_gain(trade_sound, random_range(0.9, 1.0), 0)
            audio_play_sound(trade_sound, 100, false)
            text_timer = 10
            var d = random_range(70, 80)
            var angle = random_range(3.14, 6.28)
            if (angle &gt; 5*pi/4 &amp;&amp; angle &lt; 7*pi/4)
            {
                d -= 20
            }
            tx = x + d*cos(angle)
            ty = y + d*sin(angle)
        }
        
        //animation
        if (walking)
        {
            image_speed = 0.333
            sprite_index = clawdette_walk
            if (!audio_is_playing(snd_walk)){
                audio_play_sound(snd_walk, 1, true)
                }
        }
        else
        {
            audio_stop_sound(snd_walk)
            x = floor(x+0.5)
            y = floor(y+0.5)
            anim_counter = (anim_counter + 1) % anim_max
            sprite_index = clawdette_idle
            image_speed = 0
            if (anim_counter &gt;= 60)
            {
                image_index = 3
            }
            else if (anim_counter &gt;= 54)
            {
                image_index = 2
            }
            else if (anim_counter &gt;= 48)
            {
                image_index = 1
            }
            else
            {
                image_index = 0
            }
        }

        //keep her in the room
        x = clamp(x, 0, room_width);
        y = clamp(y, 0, room_height);
    break
    case 1:
        // retracting
        audio_stop_sound(snd_walk)
        anim_counter ++
        if (anim_counter == anim_max-30)
        {
            audio_play_sound(snd_pop, 100, false);
        }
        if (anim_counter &lt;= 33)
        {
            if (anim_counter % 3 == 0)
            {
                image_index ++
            }
        }
        else if (anim_counter == anim_max)
        {
            // cancel case
            if (!keyboard_check(vk_space))
            {
                // switch to extracting
                mode = 3
                sprite_index = clawdette_extract
                image_index = 0
                anim_counter = 0
                anim_max = 24
                exit
            }
        
            // display inventory
            create_inv_sprites()
            
            // switch to in shell
            mode = 2
            sprite_index = clawdette_shell
            image_index = 0
            anim_counter = 0
            anim_max = 57
            exit
        }
    break
    case 2:
        // in shell
        
        // finished inventory mode check
        if (!keyboard_check(vk_space))
        {
            // clear inventory sprites
            script_execute(clearInvSprites)
            
            // switch to extracting
            mode = 3
            sprite_index = clawdette_extract
            image_index = 0
            anim_counter = 0
            anim_max = 24
            exit
        }
        
        
        // inventory control
        if (ds_list_size(global.inv_sprites) &gt; 0)
        {
            if (keyboard_check_pressed(ord('Z')))
            {
                // remove the item from the inventory and re-create the inventory sprites
                var obj = global.inv_sprites[| selected_item].obj
                scr_inv_rm_item(obj)
                play_drop_sound(obj)
                if (selected_item == ds_list_size(global.inv_sprites) - 1)
                {
                    selected_item --
                    if (selected_item &lt; 0)
                    {
                        selected_item = 0
                    }
                }
                clearInvSprites()
                create_inv_sprites()
                
                // add the item to the world
                var new_item = instance_create(-100, -100, obj)
                // find a free x, y position
                var placed = false
                var drop_radius_min = 10
                var drop_radius_max = 50
                var attempts = 0
                while (!placed)
                {
                    attempts ++
                    if (attempts % 50 == 0)
                    {
                        drop_radius_min += 10
                        drop_radius_max += 10
                    }
                    // todo: switch this to random angle and random distance
                    var dst = irandom_range(drop_radius_min, drop_radius_max)
                    var ang = random_range(0, 2*pi)
                    var newx = floor(dst*cos(ang) + 0.5)
                    var newy = floor(dst*sin(ang) + 0.5)
                    newx = x + newx
                    newy = y + 24 + newy
                    with (new_item)
                    {
                        if (place_empty(newx, newy))
                        {
                            x = newx
                            y = newy
                            placed = true
                        }
                    }
                }
            }
            else
            {
                if (keyboard_check_pressed(vk_right))
                {
                    deselect_item(selected_item)
                    selected_item = (selected_item + 1) % ds_list_size(global.inv_sprites)
                    audio_play_sound(snd_select, 100, false);
                }
                if (keyboard_check_pressed(vk_left))
                {
                    audio_play_sound(snd_select, 100, false);
                    deselect_item(selected_item)
                    if (selected_item == 0)
                    {
                        selected_item = ds_list_size(global.inv_sprites) - 1
                    }
                    else
                    {
                        selected_item --
                    }
                }
            }
            global.inv_sprites[| selected_item].image_index = 1
            global.inv_sprites[| selected_item].depth = -10001
            global.inv_sprites[| selected_item].extra_radius_target = 20
        }
        
        // animation
        anim_counter = (anim_counter + 1) % anim_max
        if (anim_counter == 0)
        {
            image_index = 0
        }
        else if (anim_counter == 30)
        {
            image_index ++
        }
        else if (anim_counter == 33)
        {
            image_index ++
        }
        else if (anim_counter == 54)
        {
            image_index ++
        }
        
    break
    case 3:
        // extracting
        anim_counter ++
        if (anim_counter &gt; 6 &amp;&amp; anim_counter &lt; 24)
        {
            if (anim_counter % 3 == 0)
            {
                image_index ++
            }
        }
        else if (anim_counter == anim_max)
        {
            mode = 0
            sprite_index = clawdette_idle
            image_index = 0
            anim_counter = 0
            anim_max = 63
            exit
        }
    break
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>depth = -y - 24
draw_sprite_ext(sprite_index, image_index, floor(x + 0.5), floor(y + 0.5), image_xscale, image_yscale, image_angle, image_blend, image_alpha)
if (text_timer &gt; 0)
{
    draw_set_color(c_black)
    draw_text(floor(tx + 2.5), floor(ty + 2.5), active_text)
    draw_set_color(text_color)
    draw_text(floor(tx + 0.5), floor(ty + 0.5), active_text)
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
