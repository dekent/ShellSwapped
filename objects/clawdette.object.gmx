<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>clawdette_idle</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>mode = 0  // 0: out of shell, 1: retracting, 2: in shell, 3: extracting

anim_counter = 0
anim_counter_walk = 0
anim_max = 63
anim_max_walk = 12
walking = false

pick_object = noone

var global.inventory = array_create(10);
var global.listOfSprites = array_create(500);
var global.numSpritesToRemove = 0
moved = false

text_timer = 0
active_text = ""
tx = x
ty = y

scr_inv_gain_item(pearl)
scr_inv_gain_item(pebble)
scr_inv_gain_item(pearl)
scr_inv_gain_item(seaweed)
scr_inv_gain_item(penny)
scr_inv_gain_item(penny)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//movement
walking = false
moved = false
var dx = 0
var dy = 0
var change = 6

switch (mode)
{
    case 0:
        // out of shell
        
        // check for retracting
        if (keyboard_check(vk_space))
        {
            image_speed = 0
            mode = 1
            sprite_index = clawdette_retract
            image_index = 0
            anim_counter = 0
            anim_max = 45
            exit
        }
        
        // movement
        if (keyboard_check(vk_up))
        {
            dy -= change;
            anim_counter = 0
        }
        if (keyboard_check(vk_down))
        {
            dy += change;
            anim_counter = 0
        }
        
        if (keyboard_check(vk_left))
        {
            image_xscale = -1
            dx -= change;
            anim_counter = 0
        }
        if (keyboard_check(vk_right))
        {
            image_xscale = 1
            dx += change;
            anim_counter = 0
        }
        
        if (abs(dx) &gt; 0 &amp;&amp; abs(dy) &gt; 0)
        {
            dx /= sqrt(2)
            dy /= sqrt(2)
            dx = floor(dx + 0.5)
            dy = floor(dy + 0.5)
        }
        
        //get a list of all pushable objects
        var pushables = array_create(instance_number(pushable))
        for (var i = 0; i &lt; array_length_1d(pushables); i += 1)
        {
            pushables[i] = instance_find(pushable, i);
        }
        
        //apply horizontal movement and push objects if necessary
        while (abs(dx) &gt; 0)
        {
            if (abs(dx) &gt;= 1)
            {
                var step = sign(dx)
            }
            else
            {
                var step = dx
            }
        
            if (place_free(x+step, y))
            {
                var to_move = 0
                var move_count = 0
                var blocked = false
                for (i = 0; i &lt; array_length_1d(pushables); i += 1)
                {
                    p = pushables[i]
                    if (instance_place(x+step, y, p))
                    {
                        var temp = false
                        with (p)
                        {
                            temp = place_empty(x + step, y)
                        }
                        if (temp)
                        {
                            to_move[move_count] = p
                            move_count ++
                        }
                        else
                        {
                            blocked = true
                            break
                        }
                    }
                }
                if (!blocked)
                {
                    x += step
                    dx -= step
                    walking = true   
                    for (i = 0; i &lt; move_count; i ++)
                    {
                        to_move[i].x += step
                    }     
                }
                else
                {
                    break
                }
            }
            else
            {
                break
            }
        }
        
        //apply vertical movement and push objects if necessary
        while (abs(dy) &gt; 0)
        {
            if (abs(dy) &gt;= 1)
            {
                var step = sign(dy)
            }
            else
            {
                var step = dy
            }
            
            if (place_free(x, y+step))
            {
                var to_move = 0
                var move_count = 0
                var blocked = false
                for (i = 0; i &lt; array_length_1d(pushables); i += 1)
                {
                    p = pushables[i]
                    if (instance_place(x, y+step, p))
                    {
                        var temp = false
                        with (p)
                        {
                            temp = place_empty(x, y + step)
                        }
                        if (temp)
                        {
                            to_move[move_count] = p
                            move_count ++
                        }
                        else
                        {
                            blocked = true
                            break
                        }
                    }
                }
                if (!blocked)
                {
                    y += step
                    dy -= step
                    walking = true 
                    for (i = 0; i &lt; move_count; i ++)
                    {
                        to_move[i].y += step
                    }     
                }
                else
                {
                    break
                }
            }
            else
            {
                break
            }
        }
        
        //determine if there's a pickable object nearby and highlight it
        if (pick_object != noone)
        {
            if (instance_exists(pick_object))
            {
                pick_object.image_index = 0
            }
            else
            {
                pick_object = noone
            }
        }
        pick_object = noone
        pick_threshold = 100
        min_dst = pick_threshold
        for (i = 0; i &lt; instance_number(pickable); i ++)
        {
            //check for the closest object that's also in range, then highlight it
            temp_pick_object = instance_find(pickable, i)
            dst = script_execute(distance_from_player, temp_pick_object.x, temp_pick_object.y)
            if (dst &lt; min_dst)
            {
                pick_object = temp_pick_object
                min_dst = dst
            }
        }
        if (pick_object != noone)
        {
            pick_object.image_index = 1
        }
        
        //todo: check for pickup button press
        
        //object options: "pearl", "pebble", "seaweed", "penny"
        
        
        //text updates
        if (text_timer &gt; 0)
        {
            ty -= 2
            text_timer --
        }
        
        //talking
        if (keyboard_check_pressed(ord('Z')))
        {
            active_text = choose("hi", "hi.", "hey", "hey.")
            text_timer = 10
            var d = random_range(50, 60)
            var angle = random_range(pi, 2*pi)
            if (angle &gt; 5*pi/4 &amp;&amp; angle &lt; 7*pi/4)
            {
                d -= 10
            }
            tx = x + d*cos(angle)
            ty = y + d*sin(angle)
        }
        
        if (keyboard_check_pressed(ord('X')))
        {
            active_text = choose("trade?", "trade??", "deal?", "trade")
            text_timer = 10
            var d = random_range(70, 80)
            var angle = random_range(3.14, 6.28)
            if (angle &gt; 5*pi/4 &amp;&amp; angle &lt; 7*pi/4)
            {
                d -= 20
            }
            tx = x + d*cos(angle)
            ty = y + d*sin(angle)
        }
        
        //animation
        if (walking)
        {
            image_speed = 0.333
            sprite_index = clawdette_walk
        }
        else
        {
            x = floor(x+0.5)
            y = floor(y+0.5)
            anim_counter = (anim_counter + 1) % anim_max
            sprite_index = clawdette_idle
            image_speed = 0
            if (anim_counter &gt;= 60)
            {
                image_index = 3
            }
            else if (anim_counter &gt;= 54)
            {
                image_index = 2
            }
            else if (anim_counter &gt;= 48)
            {
                image_index = 1
            }
            else
            {
                image_index = 0
            }
        }

        //keep her in the room
        x = clamp(x, 0, room_width);
        y = clamp(y, 0, room_height);
    break
    case 1:
        // retracting
        
        anim_counter ++
        if (anim_counter &lt;= 33)
        {
            if (anim_counter % 3 == 0)
            {
                image_index ++
            }
        }
        else if (anim_counter == anim_max)
        {
            // display inventory
            var alength = array_length_1d(global.inventory);
            var angle = 180;
            for (var i = 0; i &lt; alength; i++;)
            {
                for (var j = 0; j &lt; global.inventory[i]; j++;)
                {
                    global.listOfSprites[global.numSpritesToRemove] = instance_create(floor(x - 24 + lengthdir_x(75, angle) + 0.5), floor(y + 32 + lengthdir_y(75, angle) + 0.5), script_execute(index_to_inv_item, i))
                    global.numSpritesToRemove ++
                    angle -= 20
                }
            }
            
            // switch to in shell
            mode = 2
            sprite_index = clawdette_shell
            image_index = 0
            anim_counter = 0
            anim_max = 57
            exit
        }
    
    break
    case 2:
        // in shell
        
        // finished inventory mode check
        if (!keyboard_check(vk_space))
        {
            // clear inventory sprites
            script_execute(clearInvSprites)
            
            // switch to extracting
            mode = 3
            sprite_index = clawdette_extract
            image_index = 0
            anim_counter = 0
            anim_max = 24
            exit
        }
        
        // inventory control
        
        
        // animation
        anim_counter = (anim_counter + 1) % anim_max
        if (anim_counter == 0)
        {
            image_index = 0
        }
        else if (anim_counter == 30)
        {
            image_index ++
        }
        else if (anim_counter == 33)
        {
            image_index ++
        }
        else if (anim_counter == 54)
        {
            image_index ++
        }
        
    break
    case 3:
        // extracting
        anim_counter ++
        if (anim_counter &gt; 6 &amp;&amp; anim_counter &lt; 24)
        {
            if (anim_counter % 3 == 0)
            {
                image_index ++
            }
        }
        else if (anim_counter == anim_max)
        {
            mode = 0
            sprite_index = clawdette_idle
            image_index = 0
            anim_counter = 0
            anim_max = 63
            exit
        }
    break
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>depth = -y - 24
draw_sprite_ext(sprite_index, image_index, floor(x + 0.5), floor(y + 0.5), image_xscale, image_yscale, image_angle, image_blend, image_alpha)
if (text_timer &gt; 0)
{
    draw_set_color(c_black)
    draw_text(tx + 2, ty + 2, active_text)
    draw_set_color(c_white)
    draw_text(tx, ty, active_text)
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="73">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//pearl, pebble, seaweed, penny
var alength = array_length_1d(global.inventory);
var angle = 180;

for (var i = 0; i &lt; alength; i++;)
{
    for (var j = 0; j &lt; global.inventory[i]; j++;)
    {
        global.listOfSprites[global.numSpritesToRemove] = instance_create(floor(x - 24 + lengthdir_x(75, angle) + 0.5), floor(y + 32 + lengthdir_y(75, angle) + 0.5), script_execute(index_to_inv_item, i))
        global.numSpritesToRemove ++
        angle -= 20
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
