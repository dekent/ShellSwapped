<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>clawson_idle</spriteName>
  <solid>-1</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>anim_counter = 0
anim_max = 24

cx = x
cy = y + 32
depth = -cy

trade_radius = 150
value[script_execute(item_to_index, penny)] = 5
value[script_execute(item_to_index, pearl)] = 1
value[script_execute(item_to_index, pebble)] = 1
value[script_execute(item_to_index, seaweed)] = 1
value[script_execute(item_to_index, quarter)] = 10

current_trade = 0

trade_amounts[0] = 3
trade_amounts[1] = 15

trades[0] = pebble
trades[1] = quarter
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// trade stuff
player = instance_find(clawdette, 0)
dst = 0
with (player)
{
    other.dst = script_execute(distance_from_player, other.cx, other.cy)
}
if (dst &lt; trade_radius &amp;&amp; keyboard_check_pressed(ord('X')))
{
    sum = 0
    trade_item_count = 0
    trade_items = 0
    for (i = 0; i &lt; instance_number(pushable); i += 1)
    {
        item = instance_find(pushable, i);
        with (item)
        {
            if (script_execute(distance, other.cx, other.cy) &lt; other.trade_radius)
            {
                other.sum += other.value[script_execute(item_to_index, object_index)]
                other.trade_items[other.trade_item_count] = other.item
                other.trade_item_count ++
            }
        }
    }
    for (i = 0; i &lt; instance_number(pickable); i += 1)
    {
        item = instance_find(pickable, i);
        with (item)
        {
            if (script_execute(distance, other.cx, other.cy) &lt; other.trade_radius)
            {
                other.sum += other.value[script_execute(item_to_index, object_index)]
                other.trade_items[other.trade_item_count] = other.item
                other.trade_item_count ++
            }
        }
    }
    
    if (sum &gt; trade_amounts[current_trade])
    {
        for (i = array_length_1d(trade_items) - 1; i &gt;= 0; i --)
        {
            instance_destroy(trade_items[i])
        }
        
        draw_text(cx, cy+200, trade_items[0])
        new_item = instance_create(-100, -100, trades[current_trade])
        // find a free x, y position
        placed = false
        while (!placed)
        {
            // todo: switch this to random angle and random distance
            newx = irandom(trade_radius*2) - trade_radius
            newy = irandom(trade_radius)
            if (sqrt(sqr(newx) + sqr(newy)) &gt; trade_radius)
            {
                continue
            }
            newx = cx + newx
            newy = cy + newy
            
            with (new_item)
            {
                if (place_empty(other.newx, other.newy))
                {
                    x = other.newx
                    y = other.newy
                    other.placed = true
                }
            }
        }
        
        current_trade ++
    }
}

// animation
anim_counter = (anim_counter + 1) % anim_max
if (anim_counter &gt;= 21)
{
    image_index = 5
}
else if (anim_counter &gt;= 18)
{
    image_index = 4
}
else if (anim_counter &gt;= 15)
{
    image_index = 3
}
else if (anim_counter &gt;= 12)
{
    image_index = 2
}
else if (anim_counter &gt;= 6)
{
    image_index = 1
}
else
{
    image_index = 0
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_self()
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
