<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>armando_down_idle</spriteName>
  <solid>-1</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>image_speed = 0
image_index = 1
anim_counter = 0
anim_max = 216

cx = x
cy = y + 48
depth = -cy

state = 0  // 0: down idle,  1: raise,  2: up idle,  3: lower
active_threshold = 200

trade_radius = 150
value[item_to_index(penny)] = 0
value[item_to_index(pearl)] = 0
value[item_to_index(pebble)] = 0
value[item_to_index(seaweed)] = 0
value[item_to_index(stud)] = 0
value[item_to_index(live_fish)] = 0
value[item_to_index(dead_fish)] = 0

value[item_to_index(quarter)] = 0
value[item_to_index(rock1)] = 1
value[item_to_index(rock2)] = 1
value[item_to_index(driftwood)] = 0

current_trade = 0

trade_amounts[0] = 1
trade_amounts[1] = 1

trades[0] = live_fish
trades[1] = penny

trade_accept[0, 0] = "OMG is this for me?  Thank you!"
trade_accept[1, 0] = "Wowee! Got me again!"

trade_reject[0, 0] = "No, I'm good.  Thanks."
trade_reject[0, 1] = "I've got everything I need right here."
trade_reject[1, 0] = "No, really, I'm good."

out_of_trades[0] = "I'm 100% sure you can't get me anything else."
out_of_trades[1] = "I'm totally set now."

chat[0, 0] = "Oh hey, didn't feel you there."
chat[0, 1] = "That's a nice shell home you got there."
chat[0, 2] = "But if you want a really nice home, rocks are where it's at."
chat[0, 3] = "If you're looking to trade, I'm not in the market for anything."
chat[0, 4] = "Got my rock right here."
chat[1, 0] = "Oh hey, trade crab."
chat[1, 1] = "I wanna thank you again for this second home."
chat[1, 2] = "I'm gonna make a vacation home on the other side of the beach."
chat[1, 3] = "I'm gonna have so many rock parties."
chat[1, 4] = "It doesn't get any better than this."
chat[2, 0] = "Oh hey."
chat[2, 1] = "I'm gonna start renting my properties on seabnb."
chat[2, 2] = "Wanna come to one of my rock parties?"
chat[2, 3] = "You're on the list, trade crab."
chat[2, 4] = "I hope Emily comes, too..."

chat_loop_point[0] = 3
chat_loop_point[1] = 3
chat_loop_point[2] = 3

chat_index = 0

text_timer = 0
active_text = ""
tx = x
ty = y
tx_offset = 8
ty_offset = -72
ty_speed = 0.5
text_time = 80
text_color = make_colour_rgb(243, 134, 48)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//text updates
if (text_timer &gt; 0)
{
    ty -= ty_speed
    text_timer --
}

// trade stuff
var player = instance_find(clawdette, 0)
var dst = 0
with (player)
{
    dst = script_execute(distance_from_player, other.cx, other.cy)
}
if (dst &lt; trade_radius &amp;&amp; keyboard_check_pressed(ord('X')))
{
    if (current_trade &gt;= array_length_1d(trades))
    {
        active_text = choose_from_array(out_of_trades)
        text_timer = text_time
        tx = x + tx_offset
        ty = y + ty_offset
    }
    else
    {
        var sum = 0
        var trade_item_count = 0
        var trade_items = 0
        for (i = 0; i &lt; instance_number(pushable); i += 1)
        {
            var item = instance_find(pushable, i);
            with (item)
            {
                if (script_execute(distance, other.cx, other.cy) &lt; other.trade_radius)
                {
                    sum += other.value[script_execute(item_to_index, object_index)]
                    trade_items[trade_item_count] = item
                    trade_item_count ++
                }
            }
        }
        for (var i = 0; i &lt; instance_number(pickable); i += 1)
        {
            var item = instance_find(pickable, i);
            with (item)
            {
                if (script_execute(distance, other.cx, other.cy) &lt; other.trade_radius)
                {
                    sum += other.value[script_execute(item_to_index, object_index)]
                    trade_items[trade_item_count] = item
                    trade_item_count ++
                }
            }
        }
        
        if (sum &gt;= trade_amounts[current_trade])
        {
            for (var i = array_length_1d(trade_items) - 1; i &gt;= 0; i --)
            {
                global.trade_given_list[global.trade_count, i] = trade_items[i].object_index
                instance_destroy(trade_items[i])
            }
            
            global.trade_received_list[global.trade_count] = trades[current_trade]
            global.traders_list[global.trade_count] = object_index
            
            var new_item = instance_create(-100, -100, trades[current_trade])
            // find a free x, y position
            var placed = false
            while (!placed)
            {
                // todo: switch this to random angle and random distance
                var newx = irandom(trade_radius*2) - trade_radius
                var newy = irandom(trade_radius)
                if (sqrt(sqr(newx) + sqr(newy)) &gt; trade_radius)
                {
                    continue
                }
                newx = cx + newx
                newy = cy + newy
                
                with (new_item)
                {
                    if (place_empty(newx, newy))
                    {
                        x = newx
                        y = newy
                        placed = true
                    }
                }
            }

            active_text = choose_from_array_2d(trade_accept, current_trade)
            text_timer = text_time
            tx = x + tx_offset
            ty = y + ty_offset
            
            current_trade ++
            global.trade_count ++
            chat_index = 0
        }
        else
        {
            active_text = choose_from_array_2d(trade_reject, current_trade)
            text_timer = text_time
            tx = x + tx_offset
            ty = y + ty_offset
        }
    }
}
else if (dst &lt; trade_radius &amp;&amp; keyboard_check_pressed(ord('C')))
{
    active_text = chat[current_trade, chat_index]
    text_timer = text_time
    tx = x + tx_offset
    ty = y + ty_offset
    
    chat_index ++
    if (chat_index &gt;= array_length_2d(chat, current_trade))
    {
        chat_index = chat_loop_point[current_trade]
    }
}

change_condition = false
if (state == 0)  // check if we should raise the head
{
    with (player)
    {
        if (script_execute(distance_from_player, other.cx, other.cy) &lt; other.active_threshold)
        {
            other.change_condition = true
        }
    }
    if (change_condition)
    {
        state = 1
        sprite_index = armando_transition
        image_index = 3
        anim_max = 18
        anim_counter = 0
        exit
    }
}
else if (state == 2)  // check if we should lower the head
{
    with (player)
    {
        if (script_execute(distance_from_player, other.cx, other.cy) &gt; other.active_threshold)
        {
            other.change_condition = true
        }
    }
    if (change_condition)
    {
        state = 3
        sprite_index = armando_transition
        image_index = 0
        anim_max = 18
        anim_counter = 0
        exit
    }
}

if (state == 0 || state == 2)
{
    anim_counter = (anim_counter + 1) % anim_max
    if (anim_counter &lt; 96)
    {
        image_index = 0
    }
    else if (anim_counter &lt; 132)
    {
        image_index = 1
    }
    else if (anim_counter &lt; 156)
    {
        image_index = 2
    }
    else
    {
        image_index = 3
    }
}
else if (state == 1)
{
    anim_counter ++
    if (anim_counter &gt; 9)
    {
        if (anim_counter == anim_max)
        {
            state = 2
            image_index = 0
            sprite_index = armando_up_idle
            anim_counter = 0
            anim_max = 216
            exit
        }
    }
    else if (anim_counter % 3 == 0)
    {
        image_index --
    }
}
else if (state == 3)
{
    anim_counter ++
    if (anim_counter &gt; 6)
    {
        if (anim_counter == anim_max)
        {
            state = 0
            image_index = 0
            sprite_index = armando_down_idle
            anim_counter = 0
            anim_max = 216
            exit
        }
        else if (anim_counter % 3 == 0)
        {
            image_index ++
        }
    }
    
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_self()
if (text_timer &gt; 0)
{
    draw_set_color(c_black)
    draw_text_ext(floor(tx + 2.5), floor(ty + 2.5), active_text, 24, 256)
    draw_set_color(text_color)
    draw_text_ext(floor(tx + 0.5), floor(ty + 0.5), active_text, 24, 256)
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
